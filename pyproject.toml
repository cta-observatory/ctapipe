[build-system]
requires = ["setuptools>=64", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "ctapipe"
description = "Event reconstruction framework for Imaging Atmospheric Cherenkov Telescopes developed for CTAO."
readme = "README.rst"
authors = [
    {name = "ctapipe developers"},
]
maintainers = [
    {name = "Karl Kosack", email = "karl.kosack@cea.fr"},
    {name = "Maximilian Linhoff", email = "maximilian.linhoff@tu-dortmund.de"},
]
license = {text = "BSD-3-Clause"}
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Development Status :: 3 - Alpha",
]

dynamic = ["version"]
requires-python = ">=3.10"

dependencies = [
    "astropy >=5.3,<7.0.0a0",
    "bokeh ~=3.0",
    "docutils",
    "eventio >=1.9.1, <2.0.0a0",
    "iminuit >=2",
    "joblib",
    "matplotlib ~=3.0",
    "numba >=0.56",
    "numpy >=1.23,<3.0.0a0",
    "psutil",
    "pyyaml >=5.1",
    "requests",
    "scikit-learn !=1.4.0", # 1.4.0 breaks with astropy tables, before and after works
    "scipy ~=1.2",
    "tables ~=3.4",
    "tqdm >=4.32",
    "traitlets ~=5.6",
    "zstandard",
    "packaging",
]

[project.optional-dependencies]
tests = [
    "h5py",
    "pandas",
    "pytest >= 7.0",
    "pytest-cov",
    "pytest-xdist",
    "pytest_astropy_header",
    "tomli",
]

docs = [
    "sphinx",
    "pydata_sphinx_theme",
    "sphinx_automodapi",
    "nbsphinx",
    "numpydoc",
    "sphinx-design",
    "sphinx-gallery >= 0.16.0",
    "sphinxcontrib-bibtex",
    "jupyter",
    "notebook",
    "graphviz",
    "pandas",
    "ipython",
    "ffmpeg-python",
    "pypandoc",
    "tomli; python_version < '3.11'",
]

dev = [
    "pre-commit",
    "setuptools_scm[toml]",
]

all = [
    # self-reference with all extras to simplify
    "ctapipe[tests,docs,dev]",
]

[project.scripts]
ctapipe-info = "ctapipe.tools.info:main"
ctapipe-dump-instrument = "ctapipe.tools.dump_instrument:main"
ctapipe-display-dl1 = "ctapipe.tools.display_dl1:main"
ctapipe-process = "ctapipe.tools.process:main"
ctapipe-merge = "ctapipe.tools.merge:main"
ctapipe-fileinfo = "ctapipe.tools.fileinfo:main"
ctapipe-quickstart = "ctapipe.tools.quickstart:main"
ctapipe-train-energy-regressor = "ctapipe.tools.train_energy_regressor:main"
ctapipe-train-particle-classifier = "ctapipe.tools.train_particle_classifier:main"
ctapipe-train-disp-reconstructor = "ctapipe.tools.train_disp_reconstructor:main"
ctapipe-apply-models = "ctapipe.tools.apply_models:main"

[project.entry-points.ctapipe_io]
HDF5EventSource = "ctapipe.io.hdf5eventsource:HDF5EventSource"
SimTelEventSource = "ctapipe.io.simteleventsource:SimTelEventSource"


[project.entry-points.ctapipe_reco]
HillasIntersection = "ctapipe.reco.hillas_intersection:HillasIntersection"
HillasReconstructor = "ctapipe.reco.hillas_reconstructor:HillasReconstructor"
DispReconstructor = "ctapipe.reco.sklearn:DispReconstructor"
EnergyRegressor = "ctapipe.reco.sklearn:EnergyRegressor"
ParticleClassifier = "ctapipe.reco.sklearn:ParticleClassifier"

[project.urls]
repository = "https://github.com/cta-observatory/ctapipe/"
documentation = "https://ctapipe.readthedocs.io/"


[tool.setuptools.packages.find]
where = ["src"]
exclude = ["ctapipe._dev_version"]

[tool.setuptools_scm]
write_to = "src/ctapipe/_version.py"

[tool.pytest.ini_options]
minversion = "7"
testpaths = ["src"]
log_cli_level = "INFO"
xfail_strict = true
astropy_header = true

# print summary of failed tests, force errors if settings are misspelled
addopts = ["-ra", "--strict-config", "--strict-markers", "--ignore-glob=src/ctapipe/_dev_version"]

filterwarnings = [
    "error::DeprecationWarning",
    "error::astropy.utils.exceptions.AstropyDeprecationWarning",
    "error::ctapipe.utils.deprecation.CTAPipeDeprecationWarning",
    "error::ctapipe.instrument.FromNameWarning",
    "ignore:`np.MachAr` is deprecated:DeprecationWarning",
]
norecursedirs = [
    ".git",
    "_build",
    "auto_examples",
    "build",
]

[tool.coverage.run]
include = ["src/*"]
relative_files = true
omit = ["src/ctapipe/_version.py"]

[tool.towncrier]
    package = "ctapipe"
    directory = "docs/changes"
    filename = "CHANGES.rst"
    template = "docs/changes/template.rst"
    # let towncrier create proper links to the merged PR
    issue_format = "`#{issue} <https://github.com/cta-observatory/ctapipe/pull/{issue}>`__"

    [tool.towncrier.fragment.feature]
        name = "New Features"
        showcontent = true

    [tool.towncrier.fragment.bugfix]
        name = "Bug Fixes"
        showcontent = true

    [tool.towncrier.fragment.api]
        name = "API Changes"
        showcontent = true

    [tool.towncrier.fragment.datamodel]
        name = "Data Model Changes"
        showcontent = true

    [tool.towncrier.fragment.optimization]
        name = "Refactoring and Optimization"
        showcontent = true

    [tool.towncrier.fragment.maintenance]
        name = "Maintenance"
        showcontent = true

    [[tool.towncrier.section]]
        name = ""
        path = ""


[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
extend-select = [
    "I",  # isort
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# notebooks have imports in all cells
"examples/**" = ["I"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

[tool.ruff.lint.isort]
known-first-party = ["ctapipe"]


[tool.codespell]
ignore-words = ".codespell-ignores"
